.data
	r_funct_arr: .word 0, 2, 8, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 42, 69
	i_opcode_arr: .word 4, 5, 8, 9, 13, 15, 32, 35, 40, 43, 69
	j_opcode_arr: .word 2, 3, 69
	
	# each string should be 2 words in length or 7 characters + 1 null-termination
	r_name_arr: .asciiz "sll    ", "srl    ", "jr     ", "mult   ", "multu  ", "div    ", "divu   ", "add    ", "addu   ", "sub    ", "subu   ", "and    ", "or     ", "xor    ", "nor    ", "slt    "
	i_name_arr: .asciiz "beq    ", "bne    ", "addi   ", "addiu  ", "ori    ", "lui    ", "lb     ", "lw     ", "sb     ", "sw     "
	j_name_arr: .asciiz "j      ", "jal    "
	syscallName: .asciiz "syscall"
	
	newLine: .asciiz "\n"
	.align 2
	
	# (113 instructions) * (16 bytes to display each) = 1808 max bytes for outputArray w/ all valid input
	# (113 instructions) * (38 bytes per error message) = 4294 max bytes for outputArray w/ all invalid input
	outputArray: .space 4296
	.align 2

.text
	main:
		.include "2340_project_inputFileManager"
		.include "2340_project_inputToArray"
		.include "2340_project_disassemblerMacros"
		.include "2340_project_formatTypeDisassembler"
		.include "2340_project_outputFileManager"
		
		# print outputArray
		li $v0, 4
		la $a0, outputArray
		syscall
		
		li $v0, 10
		syscall
		
	exit:
		jr $ra
